from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from database import get_db
from models import User
from schemas import Register, Login, TokenOut
from auth import hash_password, verify_password, create_token

router = APIRouter()

@router.post("/register", response_model=TokenOut)
def register(payload: Register, db: Session = Depends(get_db)):
    if payload.role not in {"Individual", "NGO"}:
        raise HTTPException(400, "role must be 'Individual' or 'NGO'")
    if db.query(User).filter_by(email=payload.email).first():
        raise HTTPException(400, "Email already registered")
    user = User(
        email=payload.email,
        password_hash=hash_password(payload.password),
        role=payload.role,
        name=payload.name,
        age=payload.age,
        location=payload.location,
        goals=payload.goals
    )
    db.add(user); db.commit()
    token = create_token(payload.email, payload.role)
    return TokenOut(access_token=token)

@router.post("/login", response_model=TokenOut)
def login(payload: Login, db: Session = Depends(get_db)):
    user = db.query(User).filter_by(email=payload.email).first()
    if not user or not verify_password(payload.password, user.password_hash):
        raise HTTPException(401, "Invalid credentials")
    token = create_token(user.email, user.role)
    return TokenOut(access_token=token)